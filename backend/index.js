const fs = require('fs');
const xlsx = require('xlsx');
const cors = require('cors');
const express = require('express');
const rateLimit = require('express-rate-limit');

const api = express();
const limiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 80,
  standardHeaders: true,
  legacyHeaders: false
});

api.use(cors());
api.use(limiter);
api.use(express.json());

// --------------------------------------------------------
//  LOGIC
// --------------------------------------------------------
function convertDate(date) {
  return new Date(Math.round((date - 25569) * 86400 * 1000));
}

// --------------------------------------------------------
//  API ENDPOINTS
// --------------------------------------------------------
api.get('/ping', (req, res) => {
  res.json({
    success: true,
    message: 'Pong!',
    data: []
  });
});

api.get('/update', async (req, res) => {
  try {
    // Download MSSB Excel Files
    // ...

    const workbook = xlsx.readFile('./data/mssb.xlsx');
    const sheets = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheets];

    const results = xlsx.utils.sheet_to_json(sheet);
    const data = [];

    results.forEach(result => {
      const _data = {
        id: result['Bulletin Id'],
        kb: result['Bulletin KB'],
        os: result['Affected Product'],
        cve: result.CVEs?.split(',') || null,
        date: convertDate(result['Date Posted']),
        title: result.Title,
        impact: result.Impact,
        severity: result.Severity,
        component: result['Affected Component'] || null,
      }

      data.push(_data);
    });

    fs.writeFileSync('./data/mssb.json', JSON.stringify(data));

    res.json({
      success: true,
      message: 'Successfully updated MSSB information.',
      data: []
    });
  } catch (err) {
    res.json({
      success: false,
      message: err.message,
      data: []
    });
  }
});

api.post('/search', (req, res) => {
  try {
    const { body: { data } } = req;
    const lines = data.split('\n');
    const info = {};

    // Get standard data
    let previouskey = '';

    lines.forEach(line => {
      const key = line.split(': ')[0].trim().toLowerCase().replaceAll(' ', '_').replaceAll('(s)', '');
      const value = line.split(': ')[1]?.trim();

      if (!value) return;

      if (!line.includes(']:')) {
        previouskey = key;
        info[key] = value;
      } else {
        if (typeof(info[previouskey]) == 'string') {
          info[previouskey] = [value];
        } else {
          info[previouskey].push(value);
        }
      }
    });

    res.json({
      success: true,
      message: '',
      data: info});
  } catch (err) {
    res.json({success: false,
      message: err.message,
      data: []
    });
  }
});

api.listen(8000, () => {
  console.clear();
  console.log('Running on port 8000');
});