import { useState } from 'react';
import process from 'process';
import axios from 'axios';

export default function App() {
  const [searchValue, setSearchValue] = useState('');
  const [exploits, setExploits] = useState([]);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);

  const isDev = process.env.NODE_ENV == 'development';
  const api = isDev ? 'http://localhost:8000' : 'https://wes-api-o6qtgaecnq-uc.a.run.app';

  async function search() {
    setError('');

    try {
      setIsLoading(true);

      const { data: { success, message, data } } = await axios.post(api + '/search', {
        data: searchValue
      });

      setIsLoading(false);

      if (!success || message) {
        setShowResults(false);
        setIsLoading(false);
        return setError(message);
      }

      setExploits(data.exploits);
      setShowResults(true);
      console.log(data);
    } catch (err) {
      setShowResults(false);
      setIsLoading(false);
      setError(err.message);
    }
  }

  return (
    <div className="app">
      <h1>Windows Exploit Search</h1>
      <p className='subheading'>
        This website helps search through Microsoft Security
        Bulletins (MSSB's) to find relevant vulnerabilities
        and exploits to use against Windows target machines.
      </p>
      <p className='muted'>
        Run 'systeminfo' on the target machine and copy it's
        output into the form below.
      </p>
      <textarea
        type="text"
        value={searchValue}
        onInput={(e) => setSearchValue(e.target.value)}
      />
      <button onClick={search} disabled={isLoading}>
        {
          isLoading ? <div className='loader'></div> : 'Search'
        }
      </button>
      <p className='error'>{error}</p>

      {
        !(!showResults || isLoading) ?
        <div className='result-container'>
          <p className='exploit-count'>{exploits.length} exploit{exploits.length == 1 ? '' : 's'} found</p>
          {
            exploits.map(exploit => <ExploitItem exploit={exploit} />)
          }
        </div>
        : ''
      }
    </div>
  );

  function ExploitItem({ exploit }) {
    const sevcol = {
      "Critical": "red",
      "Moderate": "orange",
      "Important": "yellowgreen"
    };

    const date = `${exploit.date.substring(6, 8)}/${exploit.date.substring(4, 6)}/${exploit.date.substring(0, 4)}`;
    let pocs = exploit.pocs.split(',');

    return (
      <div className='exploit-item'>
        <p className='exploit-name'>{exploit.title.split('Could')[0].split('(')[0]}</p>
        <p><a target="_blank" href={"https://nvd.nist.gov/vuln/detail/" + exploit.cve}>{exploit.cve}</a> · <span style={{color: sevcol[exploit.severity]}}>{exploit.severity}</span> · KB{exploit.kb}</p>
        
        <p style={{marginTop: 6}}><strong>Published</strong>: {date}</p>
        <p><strong>Impact</strong>: {exploit.impact}</p>
        <p><strong>Affected Component</strong>: {exploit.affected_component || 'N/A'}</p>

        <strong style={{marginTop: 8}}>Resources:</strong>
        <ul>
          {
            pocs.map(poc => <li><a className='dont-break-out' target="_blank" href={poc}>{poc}</a></li>)
          }
        </ul>
      </div>
    )
  }
}